}
#100 samples of size 5
samples[[1]]
mean.norms = mat.or.vec(N,trials)
for(i in 1:trials){
mean.norms[,i] = rowMeans(samples[[i]])
hist(mean.norms[,i], main = trials[i],probability=TRUE,nclass=15,col="blue")
}
colnames(mean.norms) = c("2","5","10","25","50","100")
mean.norms
samples[[1]]
samples[,1]
samples[1,1]
samples[[1,1]]
samples[[1]]
samples[[1]]
samples[[1]]
N = 100
n = c(2,5,10,25,50,100)
u = 60
o = 15
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u,sd = o)
dim(samples[[i]]) = c(N,n[i])
}
samples[[1]]
mean.norms[,2]
mean.norms = mat.or.vec(N,trials)
mean.norms = mat.or.vec(N,trials)
mean.norms
1-pnorm(0,4,2)
1-pnorm(0,0,10)
1-pnorm(20,4,2)
1-pnorm(20,0,10)
1-pnorm(0,-4,sqrt(104))
pnorm(0,-4,sqrt(104))
1200*.25
1200*.25*.75
sqrt(225)
pnorm(270,300,15)
.1*.9
sqrt(25)*5
=sqrt(25*5)
sqrt(25*5)
.1*.9
sqrt(.09)
pnorm(.13,.1,.09*sqrt(500))
pnorm(.13,.1,.09*sqrt(1000))
pnorm(.13,.1,.09*sqrt(1000000))
pnorm(.13,.1,.09*sqrt(10))
pnorm(.13,.1,.09*sqrt(1))
.13-.1
.99*.3
.03/.297
pnorm(.13,.1,.09*sqrt(.1))
pnorm(.13,.1,.3*sqrt(.1))
(20^2)/64
(20^2)/36
trials = length(n)
#Problem #1
N = 100 # number of samples to be drawn each time
n = c(2,5,10,25,50,100) #sample size in each trial
u = 60 #population mean
o = 15 #population standard deviation
#Calculate statistic P
trials = length(n)
trials
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u,sd = o)
dim(samples[[i]]) = c(N,n[i])
}
samples
samples[[1]]
samples[[2]]
for(i in 1:trials){
means = rowMeans(samples[[i]])
sds = apply(samples[[i]], 1, sd)
num = length(means)
for (x in 1:num){
P.norms[x,i] = (means[x]-u)/(o/sqrt(n[i]))
}
title = paste("Statistic: P; Sample size:",n[i])
hist(P.norms[,i], main = title,probability=TRUE,nclass=15,col="blue")
}
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u,sd = o)
dim(samples[[i]]) = c(N,n[i])
}
samples[[2]]
P.norms = mat.or.vec(N,trials)
colnames(P.norms) = c("2","5","10","25","50","100")
means = c()
sds = c()
for(i in 1:trials){
means = rowMeans(samples[[i]])
sds = apply(samples[[i]], 1, sd)
num = length(means)
for (x in 1:num){
P.norms[x,i] = (means[x]-u)/(o/sqrt(n[i]))
}
title = paste("Statistic: P; Sample size:",n[i])
hist(P.norms[,i], main = title,probability=TRUE,nclass=15,col="blue")
}
1.75+qnorm(0.025)*(.7/sqrt(44))
1.75+qnorm(0.975)*(.7/sqrt(44))
#Problem #1
N = 1000 # number of samples to be drawn each time
n = c(2,5,10,25,50,100) #sample size in each trial
u = 60 #population mean
o = 15 #population standard deviation
#Calculate statistic P
trials = length(n)
trials
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u,sd = o)
dim(samples[[i]]) = c(N,n[i])
}
samples[[2]]
P.norms = mat.or.vec(N,trials)
colnames(P.norms) = c("2","5","10","25","50","100")
means = c()
sds = c()
for(i in 1:trials){
means = rowMeans(samples[[i]])
sds = apply(samples[[i]], 1, sd)
num = length(means)
for (x in 1:num){
P.norms[x,i] = (means[x]-u)/(o/sqrt(n[i]))
}
title = paste("Statistic: P; Sample size:",n[i])
hist(P.norms[,i], main = title,probability=TRUE,nclass=15,col="blue")
}
#check values
(means[1]-u)/(o/sqrt(n[6]))
P.norms[1,6]
(means[2]-u)/(o/sqrt(n[6]))
P.norms[2,6]
(means[100]-u)/(o/sqrt(n[6]))
P.norms[100,6]
#Calculate statistic Q
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u,sd = o)
dim(samples[[i]]) = c(N,n[i])
}
Q.norms = mat.or.vec(N,trials)
colnames(Q.norms) = c("2","5","10","25","50","100")
means = c()
sds = c()
for(i in 1:trials){
means = rowMeans(samples[[i]])
sds = apply(samples[[i]], 1, sd)
num = length(means)
for (x in 1:num){
Q.norms[x,i] = (means[x]-u)/(sds[x]/sqrt(n[i]))
}
title = paste("Statistic: Q; Sample size:",n[i])
hist(Q.norms[,i], main = title,probability=TRUE,nclass=15,col="blue")
}
#check values
(means[1]-u)/(sds[1]/sqrt(n[6]))
Q.norms[1,6]
(means[2]-u)/(sds[2]/sqrt(n[6]))
Q.norms[2,6]
(means[100]-u)/(sds[100]/sqrt(n[6]))
Q.norms[100,6]
#Calculate third statistic
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u,sd = o)
dim(samples[[i]]) = c(N,n[i])
}
S.norms = mat.or.vec(N,trials)
colnames(S.norms) = c("2","5","10","25","50","100")
means = c()
sds = c()
for(i in 1:trials){
means = rowMeans(samples[[i]])
sds = apply(samples[[i]], 1, sd)
num = length(means)
for (x in 1:num){
S.norms[x,i] = (n[i]-1)*((sds[x]^2)/(o^2))
}
title = paste("Sample size:",n[i])
hist(S.norms[,i], main = title,probability=TRUE,nclass=15,col="blue")
}
#check values
(n[6]-1)*((sds[1]^2)/(o^2))
S.norms[1,6]
(n[6]-1)*((sds[2]^2)/(o^2))
S.norms[2,6]
(n[6]-1)*((sds[100]^2)/(o^2))
S.norms[100,6]
qt(.975,79)
qt(.975,79)
qnorm(.975)
qnorm(.95)
pnorm(3)
1-pnorm(3)
1-pnorm(2.504)
library(rcmdr)
install.packages("Rcmdr")
library(rcmdr)
library(Rcmdr)
library(Rcmdr)
qchisq(0.05,4, lower.tail=FALSE)
pchisq(3.2996, 4, lower.tail=FALSE)
pchisq(.6802, 2, lower.tail = FALSE)
qchisq(.10, 2, lower.tail = FALSE)
pchisq(6.802, 2, lower.tail = FALSE)
qnorm(0.05)
qnorm(0.95)
pnorm(1.645)
qt(0.005, 10)
qt(0.995, 10)
pt(3.169273, 10)
qf(0.05, 2, 12)
qf(0.95, 2, 12)
pf(5.2, 2, 12)
qf(0.05, 4, 35)
qf(0.95, 4, 35)
pf(5.2, 2, 12)
pf(3.886, 2, 12)
pf(5.2, 2, 12, lower.tail=FALSE)
qf(.975,2,216)
pf(41.169, 2, 216, lower.tail=FALSE)
qt(.025, 10)
qt(1-.025, 10)
qt(1-.5, 10)
qt(1-.05, 10)
x <- c(92, 116, 124, 210, 216, 306, 378, 415, 502, 615, 703)
y <- c(3, 2, 3, 5, 4, 5, 5, 6, 7, 7, 9, 9)
lm(x~y)
x <- c(92, 116, 124, 210, 216, 267, 306, 378, 415, 502, 615, 703)
lm(x~y)
testModel.1 <- lm(x~y)
summary(testModel.1)
testModel.1 <- lm(y~x)
summary(testModel.1)
x <- c(92, 116, 124, 210, 216, 267, 306, 378, 415, 502, 615, 703)
y <- c(3, 2, 3, 5, 4, 5, 5, 6, 7, 7, 9, 9)
testModel.1 <- lm(y~x)
summary(testModel.1)
sales <- c(1,1,2,2,3,3,4,4,5,5)
exp <- c(1,2,1,3,2,4,3,5,5,6)
testModel.2 <- lm(sales~exp)
summary(testModel.2)
USA <- read.csv('/home/vagrant/Programming_For_Analytics/Homework/Indiv_Project/USA.csv',
header=TRUE, sep=",", quote="\"")
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
shiny::runApp('Programming_For_Analytics/Shiny/6Indiv')
pchisq(6.806, 2, lower.tail = FALSE)
pchisq(.6806, 2, lower.tail = FALSE)
qf(.975, 2, 18)
qf(.025, 2, 18)
pf(3.431, 2, 18)
pf(3.431, 2, 18, lower.tail=FALSE)
x <- c(4,4.5,5,5.5,6,6.5,7,7.5,8,8.5)
y <- c(10.1, 10.3, 10.4, 21.7, 36.7, 51.5, 67, 68.5, 68.2, 69.3)
lm(y~x)
x <- c(4,4.5,5,5.5,6,6.5,7,7.5,8,8.5)
y <- c(10.1, 10.3, 10.4, 21.7, 36.7, 51.5, 67, 68.5, 68.2, 69.3)
regmodel = lm(y~x)
summarize(regmodel)
x <- c(4,4.5,5,5.5,6,6.5,7,7.5,8,8.5)
y <- c(10.1, 10.3, 10.4, 21.7, 36.7, 51.5, 67, 68.5, 68.2, 69.3)
regmodel = lm(y~x)
regmodel.summarize()
x <- c(4,4.5,5,5.5,6,6.5,7,7.5,8,8.5)
y <- c(10.1, 10.3, 10.4, 21.7, 36.7, 51.5, 67, 68.5, 68.2, 69.3)
regmodel = lm(y~x)
summary(regmodel)
plot(x, y)
plot(x, y, col="blue")
plot(x, y)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3)
y <- c(820,840,785,820,825,775,825,815,770,835,855,760,825,840,770)
model.car = aov(y~x)
summary(model.car)
model.car = aov(x~y)
summary(model.car)
model.car = aov(y~x)
summary(model.car)
y <- c(820, 820, 825, 835, 825, 840, 825, 815, 855, 840, 785, 775, 770, 760, 770)
model.car = aov(y~x)
summary(model.car)
boxplot(noise.level~car.size, data=car.data)
summary(model.car)
boxplot(y~x)
Training <- c(22, 18, 30, 16, 25, 20, 10, 14)
Time <- c(18.4,19.2,14.5,19,16.6,17.7,24.4,1)
plot(Training,Time)
cor(Training,Time)
model1 = lm(Time ~ Training)
summary(model1)
confint(model1)
Training <- c(22, 18, 30, 16, 25, 20, 10, 14)
Time <- c(18.4,19.2,14.5,19,16.6,17.7,24.4,21)
plot(Training,Time)
cor(Training,Time)
model1 = lm(Time ~ Training)
summary(model1)
cor(Training,Time)
confint(model1)
predict(model1,list(Training=28))
plot(model1)
plot(model1)
x <- c(92,116, 124, 210, 216, 267, 306, 378, 415, 502, 615, 703)
y <- c(3, 2, 3, 5, 4, 5, 5, 6, 7, 7, 9, 9)
q6model = lm(y~x)
summary(q6model)
confint(q6model)
confint(q6model, level=.9)
summary(q6model)
confint(q6model)
confint(q6model, level=.9)
confint(q6model, level=.9)
model.car = aov(y~x)
summary(model.car)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3)
y <- c(4,8,6,9,8,2,5,3,7,1,6,7,7,8,6)
model.meds = aov(y~x)
summary(model.meds)
summarize(y~x)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- (8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
model.test = aov(y~x)
summary(model.test)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3)
y <- c(820, 820, 825, 835, 825, 840, 825, 815, 855, 840, 785, 775, 770, 760, 770)
#model.car = aov(noise.level~car.size, data=car.data)
model.car = aov(y~x)
summary(model.car)
print(x)
print(y)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
print(y)
model.test = aov(y~x)
summary(model.test)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
testing <- data.frame(y,x)
print(testing)
x <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
testing <- data.frame(y,x)
#print(testing)
model.test = aov(y~x, data=testing)
summary(model.test)
x <- c(rep("A",5),rep("B",5),rep("C",5), rep("D",5))
y <- c(8,9,6,7,3,2,4,3,5,1,3,5,4,2,3,2,2,-1,0,3)
testing <- data.frame(y,x)
print(testing)
model.test = aov(y~x, data=testing)
summary(model.test)
x <- c(rep("A",5),rep("B",5),rep("C",5))
y <- c(4,8,6,9,8,2,5,3,7,1,6,7,7,8,6)
model.meds = aov(y~x)
summary(model.meds)
Training <- c(22, 18, 30, 16, 25, 20, 10, 14)
Time <- c(18.4,19.2,14.5,19,16.6,17.7,24.4,21)
plot(Training,Time)
cor(Training,Time)
model1 = lm(Time ~ Training)
summary(model1)
x <- c(92,116, 124, 210, 216, 267, 306, 378, 415, 502, 615, 703)
y <- c(3, 2, 3, 5, 4, 5, 5, 6, 7, 7, 9, 9)
q6model = lm(y~x)
summary(q6model)
confint(q6model, level=.9)
summary(q6model)
aov(y~x)
aov(q6model)
anova(q6model, test = "F")
anova(aov, test = "F")
x <- c(1,2,1,3,2,4,3,5,5,6)
y <- c(1,1,2,2,3,3,4,4,5,5)
#Testing on example of advertising expenditures
x <- c(1,2,1,3,2,4,3,5,5,6)
y <- c(1,1,2,2,3,3,4,4,5,5)
model2 <- lm(y~x)
summary(model2)
predict(model2,list(x=4))
predict(model2,list(x=4), interval='predict')
predict(model2,list(x=4), interval='predict', level=.9)
predict(model2,4, interval='predict', level=.9)
predict(model2,list(x=4), interval='predict', level=.9)
predict(model2,list(x=4), interval='confidence', level=.95)
anova(q6model, test = "F")
model.test = aov(y~x, data=testing)
summary(model.test)
shiny::runApp('Programming_For_Analytics/Homework/Refugee_Shiny_App')
sales <- c(1,1,2,2,3,3,4,4,5,5)
adv_exp <- c(1,2,1,3,2,4,3,5,5,6)
income <- c(32,38,42,35,41,43,46,44,48,45)
salesmodel <- lm(sales ~ adv_exp + income)
summary(salesmodel)
salesmodel <- lm(sales ~ income + adv_exp)
summary(salesmodel)
vif(salesmodel)
library(car)
vif(salesmodel)
anova(salesmodel)
aov(salesmodel)
anova(salesmodel, test="F")
anova(salesmodel, test=FALSE)
aov(sales ~ adv_exp + income)
aov(salesmodel)
setwd = ('/home/vagrant/Statistics')
autodf = read.csv('Auto.csv')
autodf = read.csv('~/Auto.csv')
setwd = ('/home/vagrant/Statistics')
autodf = read.csv('~/Auto.csv')
autodf = read.csv('~/Statistics/Auto.csv')
View(autodf)
autodf.headers()
colnames(autodf)
pairs(~mpg+cylinders+displacement+horsepower+weight, data=autodf, main="Scatterplot matrix")
pairs(~mpg+cylinders+displacement+horsepower+weight+acceleration+year+origin+name
, data=autodf, main="Scatterplot matrix")
cor(autodf)
autodf_numeric = subset(autodf, select = c(mpg,cylinders,displacement,horsepower))
cor(autodf_numeric)
View(autodf_numeric)
cor(autodf_numeric, use='complete.obs')
View(autodf_numeric)
autodf_numeric = as.numeric(subset(autodf, select = c(mpg,cylinders,displacement,horsepower)))
autodf = read.csv('~/Statistics/Auto.csv', stringsAsFactors=FALSE)
autodf_numeric = as.numeric(subset(autodf, select = c(mpg,cylinders,displacement,horsepower)))
autodf = read.csv('~/Statistics/Auto.csv', header=TRUE, stringsAsFactors=FALSE)
autodf_numeric = subset(autodf, select = c(mpg,cylinders,displacement,horsepower))
str(autodf_numeric)
autodf = read.csv('~/Statistics/Auto.csv', header=TRUE, stringsAsFactors=FALSE, quote = "\"")
autodf_numeric = subset(autodf, select = c(mpg,cylinders,displacement,horsepower))
str(autodf_numeric)
autodf_clean <- autodf[which(autodf$horsepower!='?')]
autodf_clean <- autodf[which(autodf$horsepower!='?'),]
View(autodf_clean)
autodf_numeric = subset(autodf_clean, select = c(mpg,cylinders,displacement,horsepower))
str(autodf_numeric)
autodf_numeric = as.numeric(subset(autodf_clean, select = c(mpg,cylinders,displacement,horsepower)))
str(autodf_numeric)
autodf_numeric = as.numeric(subset(autodf_clean, select = c(mpg,cylinders,displacement)))
autodf_numeric = subset(autodf_clean, select = c(mpg,cylinders,displacement))
cor(autodf_numeric, use='complete.obs')
cor(autodf_numeric)
autodf_clean$horsepower <- as.numeric[autodf_clean$horsepower]
autodf_clean$horsepower <- as.numeric(autodf_clean$horsepower)
str(autodf_clean)
autodf_numeric = subset(autodf_clean, select = c(mpg,cylinders,displacement,horsepower,weight,acceleration,year,origin))
cor(autodf_numeric)
automodel = lm(mpg ~ cylinders+displacement+horsepower+weight+acceleration+year+origin)
automodel = lm(mpg ~ cylinders+displacement+horsepower+weight+acceleration+year+origin, data=autodf_numeric)
summary(automodel)
automodel.res = resid(automodel)
print(automodel.res)
length(autodf_numeric)
str(autodf_numeric)
autodf = read.csv('~/Statistics/Auto.csv', header=TRUE, stringsAsFactors=FALSE, quote = "\"")
autodf_clean <- autodf[which(autodf$horsepower!='?'),]
str(autodf_clean)
autodf_clean$horsepower <- as.numeric(autodf_clean$horsepower)
str(autodf_clean)
#Make scatterplot matrix
pairs(~mpg+cylinders+displacement+horsepower+weight+acceleration+year+origin+name
, data=autodf_clean, main="Scatterplot matrix")
#Make scatterplot matrix
pairs(~mpg+cylinders+displacement+horsepower+weight+acceleration+year+origin+name
, data=autodf, main="Scatterplot matrix")
pairs(~mpg+cylinders+displacement+horsepower+weight+acceleration+year+origin
, data=autodf_clean, main="Scatterplot matrix")
autodf_numeric = subset(autodf_clean, select = c(mpg,cylinders,displacement,horsepower,weight,acceleration,year,origin))
cor(autodf_numeric)
automodel = lm(mpg ~ cylinders+displacement+horsepower+weight+acceleration+year+origin, data=autodf_numeric)
summary(automodel)
automodel.res = resid(automodel)
print(automodel.res)
str(autodf_numeric)
str(autodf_clean)
plot(seq(1,192),automodel.res)
setwd('/home/vagrant/Programming_For_Analytics/Homework/Indiv_Project')
setwd('/home/vagrant/Programming_For_Analytics/Homework/Indiv_Project_Final')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
